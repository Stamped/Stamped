Here are some dependencies to install and basic instructions on how to get a Stamped API server up and running locally on Mac OS X.

note: if a native python dependency fails to compile, prefix it with ARCHFLAGS="-arch i386 -arch x86_64"
    * e.g., ARCHFLAGS="-arch i386 -arch x86_64" pip install pylibmc
python >= 2.5 or 2.6 (untested on more recent versions)
gcc / g++ - you'll have to install xcode and the apple developer tools to install these
homebrew - package manager for mac os x (optional but recommended to install other dependencies)
virtualenv
pip
libevent
mongodb (>= 2.0)
brew install memcached libmemcached

python packages (install with pip):
python-dev
fabric
BeautifulSoup
boto
xlrd
pymongo
flask
gunicorn
feedparser
greenlet
gevent
pil
lxml
django
whisper
celery
httplib2
pylibmc
APNSWrapper
boto
ARCHFLAGS="-arch i386 -arch x86_64" pip install pylibmc==1.2.0 (note: we've had problems with more recent versions of pylibmc)

optional for getting up and running but required for full setup:
rabbitmq
Java JRE
nginx

Stamps to getting a Stamped server up and running locally:
    Running mongod locally:
        > mongod

    Start the django webserver on port 18000:
        > cd stamped/platform/servers/httpapi
        > python manage.py runserver 18000
    
    Note: if you run into troubles here, it's likely a python dependency issue. At this point, you should be able to hit http://localhost:18000/v0/temp/ping.json in your browser and get a page saying 'true' as the JSON response.
    
    Run Stamped API unit tests:
        > cd stamped/tests/api
        > python main.py
    
    Note: if you run into errors here, they'll likely stem from python dependency issues. Most unit tests create a test account, and if one unit test fails and that test account isn't properly cleaned up, the underlying DB will likely be corrupted, so we generally clear the DB after each failed test invocation.  You can do this locally by running (assuming you're running mongod on the default port 27017):
        > mongo stamped --eval "db.dropDatabase()"
